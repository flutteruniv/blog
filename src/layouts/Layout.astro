---
import { ClientRouter } from "astro:transitions";
import { PUBLIC_GOOGLE_SITE_VERIFICATION } from "astro:env/client";
import { SITE } from "@/config";
import "@/styles/global.css";

export interface Props {
  title?: string;
  author?: string;
  profile?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
  tags?: string[];
  articleType?: 'BlogPosting' | 'Article' | 'TechArticle';
}

const {
  title = SITE.title,
  author = SITE.author,
  profile = SITE.profile,
  description = SITE.desc,
  ogImage = SITE.ogImage ? `/${SITE.ogImage}` : "/og.png",
  canonicalURL = new URL(Astro.url.pathname, Astro.url),
  pubDatetime,
  modDatetime,
  scrollSmooth = false,
  tags = [],
  articleType = 'BlogPosting',
} = Astro.props;

const socialImageURL = new URL(ogImage, Astro.url);

// Enhanced structured data for better SEO
const isHomePage = Astro.url.pathname === '/' || Astro.url.pathname === '/index.html';

const organizationSchema = {
  "@context": "https://schema.org",
  "@type": "Organization",
  name: SITE.title,
  url: SITE.website,
  logo: {
    "@type": "ImageObject",
    url: new URL('/favicon.svg', Astro.url).href
  },
  description: SITE.desc,
  sameAs: [
    "https://twitter.com/FlutterUniv",
    "https://github.com/flutteruniv",
    "https://www.youtube.com/channel/UCReuARgZI-BFjioA8KBpjsw"
  ]
};

const articleSchema = pubDatetime ? {
  "@context": "https://schema.org",
  "@type": articleType,
  headline: title,
  description: description,
  image: {
    "@type": "ImageObject",
    url: socialImageURL.href,
    width: 1200,
    height: 630
  },
  datePublished: pubDatetime.toISOString(),
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  author: {
    "@type": "Person",
    name: author,
    ...(profile && { url: profile }),
  },
  publisher: organizationSchema,
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": canonicalURL.href
  },
  ...(tags.length > 0 && {
    keywords: tags.join(', '),
    about: tags.map(tag => ({
      "@type": "Thing",
      name: tag
    }))
  }),
  inLanguage: "ja-JP",
  isPartOf: {
    "@type": "Blog",
    name: SITE.title,
    url: SITE.website
  }
} : null;

const structuredData = isHomePage ? organizationSchema : (articleSchema || organizationSchema);
---

<!doctype html>
<html
  dir={SITE.dir}
  lang=`${SITE.lang ?? "en"}`
  class={`${scrollSmooth && "scroll-smooth"}`}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
    <meta name="language" content="Japanese" />
    <meta name="geo.region" content="JP" />
    <meta name="geo.country" content="Japan" />
    {tags.length > 0 && <meta name="keywords" content={tags.join(', ')} />}
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content={title} />
    <meta property="og:type" content={pubDatetime ? "article" : "website"} />
    <meta property="og:site_name" content={SITE.title} />
    <meta property="og:locale" content="ja_JP" />
    {pubDatetime && <meta property="article:author" content={author} />}
    {tags.length > 0 && tags.map(tag => <meta property="article:tag" content={tag} />)}

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@FlutterUniv" />
    <meta name="twitter:creator" content="@FlutterUniv" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={socialImageURL} />
    <meta name="twitter:image:alt" content={title} />

    <!-- Google JSON-LD Structured data -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(structuredData)}
    />

    <!-- Enable RSS feed auto-discovery  -->
    <!-- https://docs.astro.build/en/recipes/rss/#enabling-rss-feed-auto-discovery -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title={SITE.title}
      href={new URL("rss.xml", Astro.site)}
    />

    <meta name="theme-color" content="" />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      PUBLIC_GOOGLE_SITE_VERIFICATION && (
        <meta
          name="google-site-verification"
          content={PUBLIC_GOOGLE_SITE_VERIFICATION}
        />
      )
    }

    <ClientRouter />

    <script is:inline src="/toggle-theme.js"></script>
  </head>
  <body>
    <slot />
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
</style>
